// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_api_2eproto__INCLUDED
#define PROTOBUF_api_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace eve_tools {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_api_2eproto();
void protobuf_AssignDesc_api_2eproto();
void protobuf_ShutdownFile_api_2eproto();

class EveTPMRequest;
class EveTPMResponse;
class File;

// ===================================================================

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eve_tools.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  void Swap(File* other);

  // implements Message ----------------------------------------------

  inline File* New() const { return New(NULL); }

  File* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes Content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:eve_tools.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
  static File* default_instance_;
};
// -------------------------------------------------------------------

class EveTPMRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eve_tools.EveTPMRequest) */ {
 public:
  EveTPMRequest();
  virtual ~EveTPMRequest();

  EveTPMRequest(const EveTPMRequest& from);

  inline EveTPMRequest& operator=(const EveTPMRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EveTPMRequest& default_instance();

  void Swap(EveTPMRequest* other);

  // implements Message ----------------------------------------------

  inline EveTPMRequest* New() const { return New(NULL); }

  EveTPMRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EveTPMRequest& from);
  void MergeFrom(const EveTPMRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EveTPMRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // repeated string ExpectedFiles = 2;
  int expectedfiles_size() const;
  void clear_expectedfiles();
  static const int kExpectedFilesFieldNumber = 2;
  const ::std::string& expectedfiles(int index) const;
  ::std::string* mutable_expectedfiles(int index);
  void set_expectedfiles(int index, const ::std::string& value);
  void set_expectedfiles(int index, const char* value);
  void set_expectedfiles(int index, const char* value, size_t size);
  ::std::string* add_expectedfiles();
  void add_expectedfiles(const ::std::string& value);
  void add_expectedfiles(const char* value);
  void add_expectedfiles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& expectedfiles() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_expectedfiles();

  // repeated .eve_tools.File InputFiles = 3;
  int inputfiles_size() const;
  void clear_inputfiles();
  static const int kInputFilesFieldNumber = 3;
  const ::eve_tools::File& inputfiles(int index) const;
  ::eve_tools::File* mutable_inputfiles(int index);
  ::eve_tools::File* add_inputfiles();
  ::google::protobuf::RepeatedPtrField< ::eve_tools::File >*
      mutable_inputfiles();
  const ::google::protobuf::RepeatedPtrField< ::eve_tools::File >&
      inputfiles() const;

  // @@protoc_insertion_point(class_scope:eve_tools.EveTPMRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::RepeatedPtrField< ::std::string> expectedfiles_;
  ::google::protobuf::RepeatedPtrField< ::eve_tools::File > inputfiles_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
  static EveTPMRequest* default_instance_;
};
// -------------------------------------------------------------------

class EveTPMResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eve_tools.EveTPMResponse) */ {
 public:
  EveTPMResponse();
  virtual ~EveTPMResponse();

  EveTPMResponse(const EveTPMResponse& from);

  inline EveTPMResponse& operator=(const EveTPMResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EveTPMResponse& default_instance();

  void Swap(EveTPMResponse* other);

  // implements Message ----------------------------------------------

  inline EveTPMResponse* New() const { return New(NULL); }

  EveTPMResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EveTPMResponse& from);
  void MergeFrom(const EveTPMResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EveTPMResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // repeated .eve_tools.File OutputFiles = 2;
  int outputfiles_size() const;
  void clear_outputfiles();
  static const int kOutputFilesFieldNumber = 2;
  const ::eve_tools::File& outputfiles(int index) const;
  ::eve_tools::File* mutable_outputfiles(int index);
  ::eve_tools::File* add_outputfiles();
  ::google::protobuf::RepeatedPtrField< ::eve_tools::File >*
      mutable_outputfiles();
  const ::google::protobuf::RepeatedPtrField< ::eve_tools::File >&
      outputfiles() const;

  // @@protoc_insertion_point(class_scope:eve_tools.EveTPMResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::google::protobuf::RepeatedPtrField< ::eve_tools::File > outputfiles_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_api_2eproto();
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
  static EveTPMResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// File

// optional string Name = 1;
inline void File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::name() const {
  // @@protoc_insertion_point(field_get:eve_tools.File.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.File.Name)
}
inline void File::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.File.Name)
}
inline void File::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.File.Name)
}
inline ::std::string* File::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.File.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:eve_tools.File.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.File.Name)
}

// optional bytes Content = 2;
inline void File::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::content() const {
  // @@protoc_insertion_point(field_get:eve_tools.File.Content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.File.Content)
}
inline void File::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.File.Content)
}
inline void File::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.File.Content)
}
inline ::std::string* File::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.File.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_content() {
  // @@protoc_insertion_point(field_release:eve_tools.File.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.File.Content)
}

// -------------------------------------------------------------------

// EveTPMRequest

// optional string Command = 1;
inline void EveTPMRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EveTPMRequest::command() const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMRequest.Command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EveTPMRequest::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.EveTPMRequest.Command)
}
inline void EveTPMRequest::set_command(const char* value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.EveTPMRequest.Command)
}
inline void EveTPMRequest::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.EveTPMRequest.Command)
}
inline ::std::string* EveTPMRequest::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMRequest.Command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EveTPMRequest::release_command() {
  // @@protoc_insertion_point(field_release:eve_tools.EveTPMRequest.Command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EveTPMRequest::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.EveTPMRequest.Command)
}

// repeated string ExpectedFiles = 2;
inline int EveTPMRequest::expectedfiles_size() const {
  return expectedfiles_.size();
}
inline void EveTPMRequest::clear_expectedfiles() {
  expectedfiles_.Clear();
}
inline const ::std::string& EveTPMRequest::expectedfiles(int index) const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_.Get(index);
}
inline ::std::string* EveTPMRequest::mutable_expectedfiles(int index) {
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_.Mutable(index);
}
inline void EveTPMRequest::set_expectedfiles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eve_tools.EveTPMRequest.ExpectedFiles)
  expectedfiles_.Mutable(index)->assign(value);
}
inline void EveTPMRequest::set_expectedfiles(int index, const char* value) {
  expectedfiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline void EveTPMRequest::set_expectedfiles(int index, const char* value, size_t size) {
  expectedfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline ::std::string* EveTPMRequest::add_expectedfiles() {
  // @@protoc_insertion_point(field_add_mutable:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_.Add();
}
inline void EveTPMRequest::add_expectedfiles(const ::std::string& value) {
  expectedfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline void EveTPMRequest::add_expectedfiles(const char* value) {
  expectedfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline void EveTPMRequest::add_expectedfiles(const char* value, size_t size) {
  expectedfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eve_tools.EveTPMRequest.ExpectedFiles)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EveTPMRequest::expectedfiles() const {
  // @@protoc_insertion_point(field_list:eve_tools.EveTPMRequest.ExpectedFiles)
  return expectedfiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EveTPMRequest::mutable_expectedfiles() {
  // @@protoc_insertion_point(field_mutable_list:eve_tools.EveTPMRequest.ExpectedFiles)
  return &expectedfiles_;
}

// repeated .eve_tools.File InputFiles = 3;
inline int EveTPMRequest::inputfiles_size() const {
  return inputfiles_.size();
}
inline void EveTPMRequest::clear_inputfiles() {
  inputfiles_.Clear();
}
inline const ::eve_tools::File& EveTPMRequest::inputfiles(int index) const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_.Get(index);
}
inline ::eve_tools::File* EveTPMRequest::mutable_inputfiles(int index) {
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_.Mutable(index);
}
inline ::eve_tools::File* EveTPMRequest::add_inputfiles() {
  // @@protoc_insertion_point(field_add:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eve_tools::File >*
EveTPMRequest::mutable_inputfiles() {
  // @@protoc_insertion_point(field_mutable_list:eve_tools.EveTPMRequest.InputFiles)
  return &inputfiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eve_tools::File >&
EveTPMRequest::inputfiles() const {
  // @@protoc_insertion_point(field_list:eve_tools.EveTPMRequest.InputFiles)
  return inputfiles_;
}

// -------------------------------------------------------------------

// EveTPMResponse

// optional bytes Response = 1;
inline void EveTPMResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EveTPMResponse::response() const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMResponse.Response)
  return response_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EveTPMResponse::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_tools.EveTPMResponse.Response)
}
inline void EveTPMResponse::set_response(const char* value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_tools.EveTPMResponse.Response)
}
inline void EveTPMResponse::set_response(const void* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_tools.EveTPMResponse.Response)
}
inline ::std::string* EveTPMResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMResponse.Response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EveTPMResponse::release_response() {
  // @@protoc_insertion_point(field_release:eve_tools.EveTPMResponse.Response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EveTPMResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:eve_tools.EveTPMResponse.Response)
}

// repeated .eve_tools.File OutputFiles = 2;
inline int EveTPMResponse::outputfiles_size() const {
  return outputfiles_.size();
}
inline void EveTPMResponse::clear_outputfiles() {
  outputfiles_.Clear();
}
inline const ::eve_tools::File& EveTPMResponse::outputfiles(int index) const {
  // @@protoc_insertion_point(field_get:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_.Get(index);
}
inline ::eve_tools::File* EveTPMResponse::mutable_outputfiles(int index) {
  // @@protoc_insertion_point(field_mutable:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_.Mutable(index);
}
inline ::eve_tools::File* EveTPMResponse::add_outputfiles() {
  // @@protoc_insertion_point(field_add:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eve_tools::File >*
EveTPMResponse::mutable_outputfiles() {
  // @@protoc_insertion_point(field_mutable_list:eve_tools.EveTPMResponse.OutputFiles)
  return &outputfiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eve_tools::File >&
EveTPMResponse::outputfiles() const {
  // @@protoc_insertion_point(field_list:eve_tools.EveTPMResponse.OutputFiles)
  return outputfiles_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eve_tools

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2eproto__INCLUDED
